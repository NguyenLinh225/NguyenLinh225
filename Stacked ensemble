{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NguyenLinh225/NguyenLinh225/blob/main/Stacked%20ensemble\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Data for MLP vs Transformer\n",
        "models = ['MLP', 'Transformer']\n",
        "accuracy = [0.599, 0.586]\n",
        "roc_auc = [0.751, 0.780]\n",
        "\n",
        "# Mean lines for quadrant\n",
        "mean_accuracy = np.mean(accuracy)\n",
        "mean_roc_auc = np.mean(roc_auc)\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "# Background quadrant shading\n",
        "ax.axhspan(mean_roc_auc, 0.79, facecolor='#d1f2eb', alpha=0.4)  # Top\n",
        "ax.axhspan(0.74, mean_roc_auc, facecolor='#fdebd0', alpha=0.4)  # Bottom\n",
        "ax.axvspan(mean_accuracy, 0.61, facecolor='#d6eaf8', alpha=0.4)  # Right\n",
        "ax.axvspan(0.58, mean_accuracy, facecolor='#f9ebea', alpha=0.4)  # Left\n",
        "\n",
        "# Plot models as big dots\n",
        "colors = ['#2980b9', '#e67e22']  # Blue for MLP, Orange for Transformer\n",
        "for i in range(len(models)):\n",
        "    ax.scatter(accuracy[i], roc_auc[i], s=500, color=colors[i], edgecolors='black', linewidths=1.5, zorder=5, marker='o')\n",
        "    ax.text(accuracy[i] + 0.001, roc_auc[i] + 0.001, models[i], fontsize=20, weight='bold')\n",
        "\n",
        "# Dashed lines for mean\n",
        "ax.axhline(mean_roc_auc, color='gray', linestyle='--', linewidth=1.5)\n",
        "ax.axvline(mean_accuracy, color='gray', linestyle='--', linewidth=1.5)\n",
        "\n",
        "# Quadrant labels (clean, not overlapping)\n",
        "ax.text(mean_accuracy + 0.001, mean_roc_auc + 0.001, \"High Accuracy\\nHigh ROC–AUC\", fontsize=18, color='green', weight='bold')\n",
        "ax.text(mean_accuracy + 0.001, 0.742, \"High Accuracy\", fontsize=18, color='blue', weight='bold')\n",
        "ax.text(0.582, mean_roc_auc + 0.001, \"High ROC–AUC\", fontsize=18, color='purple', weight='bold')\n",
        "ax.text(0.582, 0.742, \"Low Accuracy\\nLow ROC–AUC\", fontsize=18, color='red', weight='bold')\n",
        "\n",
        "# Labels and style\n",
        "ax.set_xlabel('Accuracy', fontsize=22, weight='bold')\n",
        "ax.set_ylabel('ROC–AUC', fontsize=22, weight='bold')\n",
        "ax.set_title('MLP vs Transformer Performance Trade-off', fontsize=24, weight='bold')\n",
        "\n",
        "# Bigger ticks\n",
        "ax.tick_params(axis='both', labelsize=18, width=2)\n",
        "ax.grid(alpha=0.3)\n",
        "ax.set_xlim(0.58, 0.61)\n",
        "ax.set_ylim(0.74, 0.79)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 807
        },
        "id": "T9nPUy3U6CLn",
        "outputId": "965c2459-3808-43d8-dcf0-0f3d932d5f1f"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "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QTcRERERERGRicjNXQEiIqLKSCKRoEmTJsiDFFIJ71ETERGRcRh0ExERiZDL5ejavSvSYG3uqhAREZEF4617IiIiIiIiIhNh0E1ERCRCEARkZWUhOysLgiCYuzpERERkoRh0ExERiVAoFFj420Ks+e1/UCjyzV0dIiIislAMuomIiIiIiIhMhEE3ERERERERkYkw6CYiIiIiIiIyEQbdRERERERERCbCoJuIiIiIiIjIRBh0ExEREREREZmI3NwVICIiqowkEgkaBDdAPqSQSniPmoiIiIzDoJuIiEiEXC5Hr969kAZrc1eFiIiILBhv3RMRERERERGZCJ90ExERiRAEAQqFAvkA5HIrSCQSc1eJiIiILBCfdBMREYlQKBSY/8t8rPxlHhSKfHNXh4iIiCwUg24iIiIiIiIiE2HQTURERERERGQiDLqJiIiIiIiITIRBNxEREREREZGJMOgmIiIiIiIiMhEG3UREREREREQmwnm6iYiIREgkEgTWDUQ+pJBIeI+aiIiIjMOgm4iISIRcLkffl/siDdbmrgoRERFZMN66JyIiIiIiIjIRBt1EREREREREJsLm5URERCLy8/Mx/5f5AIDR70yDlRWbmRMREZHh+KSbiIiIiIiIyEQYdBMRERERERGZCINuIiIiIiIiIhNh0E1ERERERERkIgy6iYiIiIiIiEyEQTcRERERERGRiXDKMCIiIhESiQQ1a9ZEPiSQSHiPmoiIiIzDoJuIiEiEXC7HgEEDkAbOz01ERETG4617IiIiIiIiIhNh0E1ERERERERkImxeTkREJCI/Px+/L/gdgAQjJk+BlRWbmRMREZHhGHQTERHpoFAozF0FIiIisnBsXk5ERERERERkIgy6iYiIiIiIiEyEQTcRERERERGRiTDoJiIiIiIiIjIRBt1EREREREREJsLRy4mIiERIIIGfnx8UkEACibmrQ0RERBaKQTcREZEIuZUcQ14dgjRwfm4iIiIyHpuXExEREREREZkIg24iIiIiIiIiE2HzciIiIhH5+flYsmgJBABDJ7wJKys2MyciIiLDMegmIiLSITs729xVICIiIgvH5uVEREREREREJsKgm4iIiIiIiMhEGHQTERERERERmQiDbiIiIiIiIiITYdBNREREREREZCIcvZyIiEiEBBJ4eXlBCQkkkJi7OkRERGShGHQTERGJ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dSi6du2KZcuXYdmSZbh//z5Wnk8HzqeXur6fnx/GjhuL8LHh8PD0qIAaE5WNXC7HlHemIA1WkMutzF0dIiIislAMuonIIB6eHpgxYwamTZuG/fv24/jx47h86TIuXbqE9PTnwbejoyOaNm2KJk2boEOHDujRswfkcl5yyHJIJBJYWVnBCpwqjIiIiIzHX8BEZBS5XI4+L/VBn5f6AAAEQUBOTg5yc3NhY2MDW1tbNh8nIiIion89Bt1EVC4kEgns7OxgZ2dn7qoQlQuFQoGDBw4iH1K0794LMrbUICIiIiNw9HIiIiIRgiDg2tVruH01CipBv5H6iYiIiIpj0E1ERERERERkIgy6iYiIiIiIiEyEQTcRERERERGRiTDoJiIiIiIiIjIRBt1EREREREREJsKgm4iIiIiIiMhEOOkoERGRCLlcjomTJiId1pDLrcxdHSIiIrJQDLqJiIhESCQS2NvbQwFrc1eFiIiILBiblxMRERERERGZCJ90ExERiVAoFPj7yN/IgxStu3SFTM6vTCIiIjIcn3QTERGJEAQBly9fxvXLF6ESVOauDhEREVkoBt1EREREREREJsKgm4iIiIiIiMhEGHQTERERERERmQiDbiIiIiIiIiITYdBNREREREREZCIMuomIiIiIiIhMhJOOEhERiZDL5Rj3+jhkwBpyuZW5q0NEREQWikE3ERGRCIlEAmdnZ0hgbe6qEBERkQVj83IiIiIiIiIiE+GTbiIiIhFKpRInjp9AHmRo0aETZDKZuatEREREFohPuomIiESoVCqcP3cekef+gUqlNHd1iIiIyEIx6CYiIiIiIiIyEQbdRERERERERCbCoJuIiIiIiIjIRBh0ExEREREREZkIg24iIiIiIiIiE2HQTURERERERGQinKebiIhIhFwux2tjXkMmrCCXW5m7OkRERGShGHQTERGJkEgk8PDwgDWszV0VIiIismBsXk5ERERERERkInzSTUREJEKpVOKfM/8gFzI0ad0WMpnM3FUiIiIiC8Sgm4iISIRKpcLpU6cBAI1CWjHoJiIiIqOweTkRERERERGRiTDoJiIiIiIiIjIRBt1EREREREREJsKgm4iIiIiIiMhEGHQTERERERERmQiDbiIiIiIiIiIT4ZRhREREImQyGYaPHI5MWEEm49clERERGYe/IoiIiERIpVJ4e3sjDdbmrgoRERFZMDYvJyIiIiIiIjIRPukmIiISoVQqcfHCReRAhuDmLSGTycxdJSIiIrJADLqJiIhEqFQqHPv7GAAgqGkzBt1ERERkFDYvJyIiIiIiIjIRBt1EREREREREJsKgm4iIiIiIiMhEGHQTERERERERmQiDbiIiIiIiIiITYdBNREREREREZCKcMoyIiEiETCbDK0NfQRasIJPx65KIiIiMw18RREREIqRSKfz9/ZEGa3NXhYiIiCwYm5cTERERERERmQifdBMREYlQKpWIvBKJHMhRv3ETSGUyc1eJiIiILBCDbiIiIhEqlQqHDx0GAAQ2bMigm4iIiIzC5uVEREREREREJsKgm4iIiIiIiMhEGHQTERERERERmQiDbiIiIiIiIiITYdBNREREREREZCIMuomIiIiIiIhMhFOGERERiZDJZOg/sD+yYAWZjF+XREREZBz+iiAiIhIhlUpRq1YtpMHa3FUhIiIiC8bm5UREREREREQmwifdREREIpRKJW5cv4FsyFEnqAGkMpm5q0REREQWiEE3ERGRCJVKhX179wEAatarx6CbiIiIjMLm5UREREREREQmwqCbiIiIiIiIyEQYdBMRERERERGZCINuIiIiIiIiIhNh0E1ERERERERkIgy6iYiIiIiIiEyEU4YRERGJkMlkCOsbhmzIIZPx65KIiIiMw18RREREIqRSKerWq4s0WJu7KkRERGTB2LyciIiIiIiIyEQYdBMREYlQqVS4dfMWYm/egEqlMnd1iIiIyEIx6CYiIhKhVCqxa+cuHNq5DUqlwtzVISIiIgvFoJuIiIiIiIjIRBh0ExEREREREZkIg24iIiIiIiIiE2HQTURERERERGQiDLqJiIiIiIiITIRBNxEREREREZGJyM1dASIiospIKpWiZ6+eyIYcMqnM3NUhIiIiC8Wgm4iISIRMJkNww2CkwdrcVSEiIiILxublRERERERERCbCoJuIiEiESqVCTEwM7sZEQ6VSmbs6REREZKEYdBMREYlQKpXYtmUb9m/ZCKVSYe7qEBERkYVi0E1ERERERERkIgy6iYiIiIiIiEyEQTcRERERERGRiTDoJiIiIiIiIjIRBt1EREREREREJsKgm4iIiIiIiMhE5OauABERUWUklUoR2jUUOZBDJpWZuzpERERkoRh0ExERiZDJZGjarCnSYG3uqhAR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dVfyvHK233fffdi3bx9Gjx5d1MMTERG5hQCQcDsJiYmJpV0UIiIiKsdcfqbbWseOHfH7779j27Zt+Oabb7Br1y5cvXoViqIAAGRZRq1atdCjRw8MGjQIAwYMKI7DEhEREREREZVpxRJ05+jfvz/69+8PwNyqffv2bQBASEiI3W7mRERERERERBVZsQbd1iRJ4jRgREREREREVKkV+ZluIiIiIiIiIrKvWFu6r1y5gp07d+Lnn3/G1atXkZCQAACoWrUqatWqha5du6J3796oXbt2cR6WiIiIiIiIqEwqlqA7Ojoab731FtatW2cZPA2AZSTznOe516xZA1mWMXLkSMycORP169cvjsMTEREVOwlAgL8flAJTEhERETlW5KB727ZtGDVqFNLS0hxOF2a93mQyYc2aNdi6dSu++uorDBw4sKhFICIiKnY6nQ7PTRwDvdCVdlGIiIioHCvSM93ffPMNBg0ahNTUVAghIEmSUy8hBFJTUzF48GBs2bKluM6FiIiIiIiIqExxOei+dOkSxo0bB5PJZAmmnZWTXlEUjB8/HhcvXnS1GERERERERERllstB9xtvvAG9Xm8TbAsh8n3llZqaijfeeMPVYhAREbmFwWDEsqgNWLdmLYxGY2kXh4iIiMopl4Lu6OhobNy4URVwCyFQvXp1vPLKK9i9ezeuXbuGzMxMZGZm4tq1a9i9ezdefvllVKtWTTXAmhACmzZtQnR0dPGcERERUTEQELh24yZu3rjhcMwSIiIiooK4FHR/9913MJlMAHIHSRs1ahT+/vtvvPfee3j44YcRGhoKDw8PeHh4IDQ0FA8//DDmzJmDCxcu4PHHH1d9gVEUBVu3bi2G0yEiIiIiIiIqO1wKun/++WfLe0mS0KdPH3z11Vfw8/MrcF8/Pz989dVX6NOnj2Xwtbx5EhEREREREVUELgXd586ds3QNB4A5c+YUan9JklT7CCFw/vx5V4pCREREREREVGa5FHQnJiZa3levXh0tWrQodB4tW7ZEaGioZfn27duuFIWIiIiIiIiozHIp6E5JSbG8tw6cC8t6X71e73I+RERERERERGWRS0G3r6+v5b11q3dhWe9rnScREVFZ4OPtBS9v79IuBhEREZVjWld2CgkJQXJyMgAgLi4OMTExqFu3bqHyiImJwdWrVy0DqQUHB7tSFCIiIrfw0OkwffIE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Zbtz5w6aNWuGy5cvo3Xr1qopw44cOYKnn34ap06dgre3N44dO5bvs9955TzTnfDPJQ6kRvlSFIFbiUmoFszBsSh/rCu2sg0GzPt4MQBg8rSpHEjtLqEoSExMNA94xB+MKR+sK+Qs1hVyVkpyMurWiUBKSgr8/ctPHFTkn+2djdkLSufKM81arRZbt25Ft27dEBsbix49esDHxweKoljmB2/Tpg2ioqIKnXcOvV6PDRs2AABGjx7tVMANmLvT79ixAz169MCJEyfQoUMHyzPtaWlpAABfX1+sXbu2UAE3ERERERERlR9F/inJMtKgnZcr6QorIiICp06dwowZM9C8eXNIkgSdTod27dph/vz5OHToEIKCglzOf926dZbR2p3tWp7j3nvvxdmzZzFjxgzL4GomkwmNGzfG888/jzNnzmDAgAEul42IiIiIiIjKtiJ1Ly8uOd3UC9u9vLJi93JyFrsMk7NYV2yxe7l97AZKzmJdIWexrpCzKl33chdidSIiIiIiIqJKxaWge+/evcVdDiIiIiIiIqIKx6Wgu2vXrsVdDiIiIiIiIqIKh5OOEhER2aHTavHyc88gVeg4RzcRERG5jN8iiIiI7JAkCR46HXSCA6gRERGR6zg8IBEREREREZGbsKWbiIjIDqPRhO2798EACd26d2cXcyIiInIJW7qJiIjsUISCU+f+xPlz5zlNJhEREbmMQTcRERERERGRmzDoJiIiIiIiInITBt1EREREREREbsKgm4iIiIiIiMhNGHQTERERERERuQmDbiIiIiIiIiI34aSjREREdui0Wrz47FNIFVrO0U1EREQu47cIIiIiOyRJQhUfb5iErrSLQkREROUYu5cTERERERERuQlbuomIiOwwGk3Y9fMBZENG5y5d2MWciIiIXMKWbiIiIjsUoeDYyTM4ffIUhBClXRwiIiIqpxh0ExEREREREbkJg24iIiIiIiIiN2HQTUREREREROQmDLqJiIiIiIiI3IRBNxEREREREZGbMOgmIiIiIiIichNOOkpERGSHTqvFtAlPIk1oOUc3ERERuYzfIoiIiOyQJAmBAf6Qha60i0JERETlGLuXExEREREREbkJW7qJiIjsMJlM2HvgELKhQcdOD0Kj0ZR2kYiIiKgcYks3ERGRHSZFwaFjJ/DHsWNQFKW0i0NERETlFINuIiIiIiIiIjdh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EhERkcsYdBMREdmh0WjQo2sn6AW7lRMREZHr+NM9ERERERERkZsw6CYiIrJDCIHkFD30KSngmKNERETkKgbdREREdhiMRixa9iVWLl8Bo9FY2sUhIiKicopBNxEREREREZGbMOgmIiIiIiIichMG3URERERERERuwqCbiIiIiIiIyE0YdBMRERERERG5CYNuIiIiIiIiIjfRlnYBiIiIyiJZktGuVXNkQ4YkSaVdHCIiIiqnGHQTERHZodVq0Ld7V+iFrrSLQkREROUYu5cTERERERERuQmDbiIiIjuEELiTnoH09HQIIUq7OERERFROMegmIiKyw2A04oPPl2PpF4thNBpLuzhERERUTjHoJiIiIiIiInITBt1EREREREREbsKgm4iIiIiIiMhNGHQTERERERERuQmDbiIiIiIiIiI3YdBNRERERERE5Cba0i4AERFRWSRLMlo2vRcGSJAkqbSLQ0REROUUg24iIiI7tFoNHunTHXqhK+2iEBERUTnG7uVEREREREREbsKgm4iIyA4hBLINBhgMBgghSrs4REREVE4x6CYiIrLDYDRi3seL8dmiT2A0Gku7OERERFROMegmIiIiIiIichMG3URERERERERuwqCbiIiIiIiIyE0YdBMRERERERG5CYNuIiIiIiIiIjdh0E1ERERERETkJtrSLgAREVFZJEsSmjSsDwNkSJJU2sUhIiKicopBNxERkR1arRZDB/aBXuhKuyhERERUjrF7OREREREREZGbMOgmIiIiIiIichN2LyciIrIj22DAvI8XAwAmT5sKnY7dzImIiKjw2NJNRERERERE5CYMuomIiIiIiIjchEE3ERERERERkZsw6CYiIiIiIiJyEwbdRERERERERG7CoJuIiIiIiIjITThlGBERkR2yJKFB3TowQoIkSaVdHCIiIiqnGHQTERHZodVqMXLwAOgF5+cmIiIi17F7OREREREREZGbMOgmIiIiIiIichN2LyciIrIj22DAB58thwDw9LOToNOxmzkREREVHlu6qUyT+z0KjX811avS+367zTXR+FeD/OT40i4ZUYVjMBphNBpLuxhERERUjjHoJipn5Kh19jf88COQmFSyhSEiIiIionwx6CYqTxISgB93290kZWdD2rCphAtERERERET5YdBNVI5IX2+EZDA43r7GQSs4ERERERGVCgbd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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Data for MLP vs Transformer\n",
        "models = ['MLP', 'Transformer']\n",
        "accuracy = [0.599, 0.586]\n",
        "roc_auc = [0.751, 0.780]\n",
        "\n",
        "# Mean lines for quadrant\n",
        "mean_accuracy = np.mean(accuracy)\n",
        "mean_roc_auc = np.mean(roc_auc)\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "# Background quadrant shading\n",
        "ax.axhspan(mean_roc_auc, ax.get_ylim()[1], facecolor='#d1f2eb', alpha=0.4)  # Top\n",
        "ax.axhspan(ax.get_ylim()[0], mean_roc_auc, facecolor='#fdebd0', alpha=0.4)  # Bottom\n",
        "ax.axvspan(mean_accuracy, ax.get_xlim()[1], facecolor='#d6eaf8', alpha=0.4)  # Right\n",
        "ax.axvspan(ax.get_xlim()[0], mean_accuracy, facecolor='#f9ebea', alpha=0.4)  # Left\n",
        "\n",
        "# Plot models\n",
        "colors = ['#2980b9', '#e67e22']  # Blue for MLP, Orange for Transformer\n",
        "for i in range(len(models)):\n",
        "    ax.scatter(accuracy[i], roc_auc[i], s=300, color=colors[i], edgecolors='black', linewidths=1.5, zorder=5)\n",
        "    ax.text(accuracy[i] + 0.001, roc_auc[i] + 0.001, models[i], fontsize=16, weight='bold')\n",
        "\n",
        "# Dashed lines for mean\n",
        "ax.axhline(mean_roc_auc, color='gray', linestyle='--', linewidth=1.2)\n",
        "ax.axvline(mean_accuracy, color='gray', linestyle='--', linewidth=1.2)\n",
        "\n",
        "# Quadrant labels (clean)\n",
        "ax.text(mean_accuracy + 0.001, mean_roc_auc + 0.002, \"High Accuracy\\nHigh ROC–AUC\", fontsize=14, color='green', weight='bold')\n",
        "ax.text(mean_accuracy + 0.001, mean_roc_auc - 0.012, \"High Accuracy\", fontsize=14, color='blue', weight='bold')\n",
        "ax.text(mean_accuracy - 0.027, mean_roc_auc + 0.002, \"High ROC–AUC\", fontsize=14, color='purple', weight='bold')\n",
        "ax.text(mean_accuracy - 0.03, mean_roc_auc - 0.012, \"Low Accuracy\\nLow ROC–AUC\", fontsize=14, color='red', weight='bold')\n",
        "\n",
        "# Labels and style\n",
        "ax.set_xlabel('Accuracy', fontsize=18, weight='bold')\n",
        "ax.set_ylabel('ROC–AUC', fontsize=18, weight='bold')\n",
        "ax.set_title('MLP vs Transformer Performance Trade-off', fontsize=20, weight='bold')\n",
        "ax.tick_params(axis='both', labelsize=14)\n",
        "ax.grid(alpha=0.3)\n",
        "ax.set_xlim(0.58, 0.61)\n",
        "ax.set_ylim(0.74, 0.79)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 807
        },
        "id": "coju1Dmb27Pw",
        "outputId": "281bd116-976a-4e3c-cf3f-10346d9cdc3c"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ============================================\n",
        "# STEP 0: Setup\n",
        "# ============================================\n",
        "!pip install torch torchvision torchaudio scikit-learn pandas matplotlib seaborn --quiet\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, roc_auc_score\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(\"Using device:\", device)\n",
        "\n",
        "# ============================================\n",
        "# STEP 1: Load & Preprocess Data\n",
        "# ============================================\n",
        "# Replace with your file path in Colab after uploading\n",
        "file_path = \"/content/GSE212041_Neutrophil_RNAseq_Count_Matrix.txt.gz\"\n",
        "\n",
        "# Load dataset\n",
        "df = pd.read_csv(file_path, sep=\"\\t\", index_col=0)\n",
        "print(\"Original Shape:\", df.shape)\n",
        "\n",
        "# Transpose so samples are rows\n",
        "df = df.T\n",
        "print(\"After transpose:\", df.shape)\n",
        "\n",
        "# Extract labels (assume sample names contain H, D0, D3, D7)\n",
        "labels = df.index.to_series().apply(lambda x: 'H' if 'H' in x else ('D0' if 'D0' in x else ('D3' if 'D3' in x else 'D7')))\n",
        "label_encoder = LabelEncoder()\n",
        "y = label_encoder.fit_transform(labels)\n",
        "\n",
        "# Normalize counts (log1p CPM)\n",
        "counts = df.values\n",
        "counts = (counts / counts.sum(axis=1, keepdims=True)) * 1e6  # CPM\n",
        "X = np.log1p(counts)\n",
        "\n",
        "# Train-test split\n",
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
        "\n",
        "# Convert to PyTorch tensors\n",
        "X_train = torch.tensor(X_train, dtype=torch.float32).to(device)\n",
        "X_val = torch.tensor(X_val, dtype=torch.float32).to(device)\n",
        "y_train = torch.tensor(y_train, dtype=torch.long).to(device)\n",
        "y_val = torch.tensor(y_val, dtype=torch.long).to(device)\n",
        "\n",
        "input_dim = X_train.shape[1]\n",
        "num_classes = len(np.unique(y))\n",
        "\n",
        "print(f\"Input dim: {input_dim}, Classes: {num_classes}\")\n",
        "\n",
        "# ============================================\n",
        "# STEP 2: Define Models\n",
        "# ============================================\n",
        "class MLPClassifier(nn.Module):\n",
        "    def __init__(self, input_dim, hidden_dim, num_classes):\n",
        "        super(MLPClassifier, self).__init__()\n",
        "        self.layers = nn.Sequential(\n",
        "            nn.Linear(input_dim, hidden_dim),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.3),\n",
        "            nn.Linear(hidden_dim, hidden_dim),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.3),\n",
        "            nn.Linear(hidden_dim, num_classes)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.layers(x)\n",
        "\n",
        "class TransformerClassifier(nn.Module):\n",
        "    def __init__(self, input_dim, num_heads, hidden_dim, num_classes):\n",
        "        super(TransformerClassifier, self).__init__()\n",
        "        self.embedding = nn.Linear(input_dim, hidden_dim)\n",
        "        encoder_layer = nn.TransformerEncoderLayer(d_model=hidden_dim, nhead=num_heads, batch_first=True)\n",
        "        self.transformer = nn.TransformerEncoder(encoder_layer, num_layers=2)\n",
        "        self.fc = nn.Linear(hidden_dim, num_classes)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.embedding(x).unsqueeze(1)  # (batch, seq=1, hidden)\n",
        "        x = self.transformer(x)\n",
        "        x = x.mean(dim=1)\n",
        "        return self.fc(x)\n",
        "\n",
        "# ============================================\n",
        "# STEP 3: Train Function\n",
        "# ============================================\n",
        "def train_model(model, X_train, y_train, X_val, y_val, epochs=20, lr=1e-3):\n",
        "    model = model.to(device)\n",
        "    optimizer = optim.Adam(model.parameters(), lr=lr)\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    for epoch in range(epochs):\n",
        "        model.train()\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(X_train)\n",
        "        loss = criterion(outputs, y_train)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "    # Validation\n",
        "    model.eval()\n",
        "    with torch.no_grad():\n",
        "        preds = torch.argmax(model(X_val), dim=1)\n",
        "        acc = accuracy_score(y_val.cpu(), preds.cpu())\n",
        "        f1 = f1_score(y_val.cpu(), preds.cpu(), average='macro')\n",
        "        probs = torch.softmax(model(X_val), dim=1).cpu().numpy()\n",
        "        roc = roc_auc_score(y_val.cpu(), probs, multi_class='ovo')\n",
        "    return model, acc, f1, roc\n",
        "\n",
        "# ============================================\n",
        "# STEP 4: Initialize and Train\n",
        "# ============================================\n",
        "hidden_dim = 128\n",
        "num_heads = 4\n",
        "\n",
        "mlp = MLPClassifier(input_dim, hidden_dim, num_classes)\n",
        "transformer = TransformerClassifier(input_dim, num_heads, hidden_dim, num_classes)\n",
        "\n",
        "mlp, acc_mlp, f1_mlp, roc_mlp = train_model(mlp, X_train, y_train, X_val, y_val)\n",
        "transformer, acc_trans, f1_trans, roc_trans = train_model(transformer, X_train, y_train, X_val, y_val)\n",
        "\n",
        "# ============================================\n",
        "# STEP 5: Ensemble Prediction (Soft Voting)\n",
        "# ============================================\n",
        "def ensemble_predict(model_mlp, model_trans, X, alpha=0.5):\n",
        "    model_mlp.eval()\n",
        "    model_trans.eval()\n",
        "    with torch.no_grad():\n",
        "        probs_mlp = torch.softmax(model_mlp(X), dim=1)\n",
        "        probs_trans = torch.softmax(model_trans(X), dim=1)\n",
        "        ensemble_probs = alpha * probs_mlp + (1 - alpha) * probs_trans\n",
        "    return ensemble_probs\n",
        "\n",
        "ensemble_probs = ensemble_predict(mlp, transformer, X_val)\n",
        "ensemble_preds = torch.argmax(ensemble_probs, dim=1)\n",
        "acc_ens = accuracy_score(y_val.cpu(), ensemble_preds.cpu())\n",
        "f1_ens = f1_score(y_val.cpu(), ensemble_preds.cpu(), average='macro')\n",
        "roc_ens = roc_auc_score(y_val.cpu(), ensemble_probs.cpu().numpy(), multi_class='ovo')\n",
        "\n",
        "# ============================================\n",
        "# STEP 6: Print Results\n",
        "# ============================================\n",
        "print(f\"MLP: Acc={acc_mlp:.3f}, F1={f1_mlp:.3f}, ROC-AUC={roc_mlp:.3f}\")\n",
        "print(f\"Transformer: Acc={acc_trans:.3f}, F1={f1_trans:.3f}, ROC-AUC={roc_trans:.3f}\")\n",
        "print(f\"Ensemble: Acc={acc_ens:.3f}, F1={f1_ens:.3f}, ROC-AUC={roc_ens:.3f}\")\n",
        "\n",
        "# ============================================\n",
        "# STEP 7: Visualization\n",
        "# ============================================\n",
        "metrics_df = pd.DataFrame({\n",
        "    \"Model\": [\"MLP\", \"Transformer\", \"Ensemble\"],\n",
        "    \"Accuracy\": [acc_mlp, acc_trans, acc_ens],\n",
        "    \"F1\": [f1_mlp, f1_trans, f1_ens],\n",
        "    \"ROC-AUC\": [roc_mlp, roc_trans, roc_ens]\n",
        "})\n",
        "\n",
        "metrics_df_melted = metrics_df.melt(id_vars=\"Model\", var_name=\"Metric\", value_name=\"Score\")\n",
        "\n",
        "plt.figure(figsize=(8,6))\n",
        "sns.barplot(x=\"Metric\", y=\"Score\", hue=\"Model\", data=metrics_df_melted)\n",
        "plt.title(\"Model Comparison: MLP vs Transformer vs Ensemble\")\n",
        "plt.ylim(0, 1)\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 263
        },
        "id": "JsQcC6JCALR2",
        "outputId": "2ebae651-60f0-407a-9f52-7c5cb22065dc"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using device: cpu\n",
            "Original Shape: (60640, 782)\n",
            "After transpose: (782, 60640)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "unsupported operand type(s) for /: 'str' and 'str'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-49-1573012111.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;31m# Normalize counts (log1p CPM)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0mcounts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m \u001b[0mcounts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mcounts\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mcounts\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m1e6\u001b[0m  \u001b[0;31m# CPM\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog1p\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcounts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for /: 'str' and 'str'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()\n",
        "df.dtypes"
      ],
      "metadata": {
        "id": "1brrValkBapd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import accuracy_score, f1_score, roc_auc_score\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Upload your file\n",
        "print(\"Please upload GSE212041_Neutrophil_RNAseq_Count_Matrix.txt.gz\")\n",
        "uploaded = files.upload()\n",
        "\n",
        "# After upload, file will be in /content/\n",
        "file_path = \"/content/GSE212041_Neutrophil_RNAseq_Count_Matrix.txt.gz\"\n"
      ],
      "metadata": {
        "id": "TQmxgNrnCE5G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# After loading the raw file\n",
        "df = pd.read_csv(file_path, sep=\"\\t\", index_col=0)\n",
        "\n",
        "# The original matrix is likely genes as rows and samples as columns\n",
        "# So transpose to samples x genes\n",
        "df = df.T\n",
        "print(\"After transpose:\", df.shape)  # Should now be (samples, genes)\n",
        "\n",
        "# Ensure numeric values\n",
        "df = df.apply(pd.to_numeric, errors='coerce')\n",
        "\n",
        "# Handle any NaNs (if present)\n",
        "df = df.fillna(0)\n",
        "\n",
        "# Extract matrix\n",
        "X = df.values"
      ],
      "metadata": {
        "id": "0vkQZPVLKYYK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load data\n",
        "df = pd.read_csv(file_path, sep=\"\\t\", index_col=0)\n",
        "print(\"Original shape:\", df.shape)  # genes x samples\n",
        "\n",
        "# Transpose so samples are rows\n",
        "df = df.T\n",
        "print(\"After transpose:\", df.shape)  # Should be (samples, genes)\n",
        "\n",
        "# Convert to numeric\n",
        "df = df.apply(pd.to_numeric, errors='coerce').fillna(0)\n",
        "\n",
        "# Extract labels from row names (sample names)\n",
        "labels = df.index.to_series().apply(lambda x: 'H' if 'H' in x else ('D0' if 'D0' in x else ('D3' if 'D3' in x else 'D7')))\n",
        "label_encoder = LabelEncoder()\n",
        "y = label_encoder.fit_transform(labels)\n",
        "\n",
        "# Matrix\n",
        "X = df.values\n",
        "print(\"X shape:\", X.shape, \"y shape:\", y.shape)  # Both should start with 782"
      ],
      "metadata": {
        "id": "6rwJma4wK6UO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# STEP 2: Split Data\n",
        "# ============================================\n",
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
        "\n",
        "# Convert to PyTorch tensors\n",
        "X_train = torch.tensor(X_train, dtype=torch.float32).to(device)\n",
        "X_val = torch.tensor(X_val, dtype=torch.float32).to(device)\n",
        "y_train = torch.tensor(y_train, dtype=torch.long).to(device)\n",
        "y_val = torch.tensor(y_val, dtype=torch.long).to(device)\n",
        "\n",
        "input_dim = X_train.shape[1]\n",
        "num_classes = len(np.unique(y))\n",
        "print(f\"Input dim: {input_dim}, Classes: {num_classes}\")"
      ],
      "metadata": {
        "id": "gOiMYHP-LPEV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# STEP 3: Define Models\n",
        "# ============================================\n",
        "class MLPClassifier(nn.Module):\n",
        "    def __init__(self, input_dim, hidden_dim, num_classes):\n",
        "        super(MLPClassifier, self).__init__()\n",
        "        self.layers = nn.Sequential(\n",
        "            nn.Linear(input_dim, hidden_dim),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.3),\n",
        "            nn.Linear(hidden_dim, hidden_dim),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.3),\n",
        "            nn.Linear(hidden_dim, num_classes)\n",
        "        )\n",
        "    def forward(self, x):\n",
        "        return self.layers(x)"
      ],
      "metadata": {
        "id": "QK03itP7Ljxp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class TransformerClassifier(nn.Module):\n",
        "    def __init__(self, input_dim, num_heads, hidden_dim, num_classes):\n",
        "        super(TransformerClassifier, self).__init__()\n",
        "        self.embedding = nn.Linear(input_dim, hidden_dim)\n",
        "        encoder_layer = nn.TransformerEncoderLayer(d_model=hidden_dim, nhead=num_heads, batch_first=True)\n",
        "        self.transformer = nn.TransformerEncoder(encoder_layer, num_layers=2)\n",
        "        self.fc = nn.Linear(hidden_dim, num_classes)\n",
        "    def forward(self, x):\n",
        "        x = self.embedding(x).unsqueeze(1)\n",
        "        x = self.transformer(x)\n",
        "        x = x.mean(dim=1)\n",
        "        return self.fc(x)"
      ],
      "metadata": {
        "id": "NWg41uuOLlEq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# STEP 4: Training Function\n",
        "# ============================================\n",
        "def train_model(model, X_train, y_train, X_val, y_val, epochs=15, lr=1e-3):\n",
        "    model = model.to(device)\n",
        "    optimizer = optim.Adam(model.parameters(), lr=lr)\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    for epoch in range(epochs):\n",
        "        model.train()\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(X_train)\n",
        "        loss = criterion(outputs, y_train)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "    # Validate\n",
        "    model.eval()\n",
        "    with torch.no_grad():\n",
        "        preds = torch.argmax(model(X_val), dim=1)\n",
        "        acc = accuracy_score(y_val.cpu(), preds.cpu())\n",
        "        f1 = f1_score(y_val.cpu(), preds.cpu(), average='macro')\n",
        "        probs = torch.softmax(model(X_val), dim=1).cpu().numpy()\n",
        "        roc = roc_auc_score(y_val.cpu(), probs, multi_class='ovo')\n",
        "    return model, acc, f1, roc"
      ],
      "metadata": {
        "id": "PH09pNnGLnwF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# STEP 5: Train MLP and Transformer\n",
        "# ============================================\n",
        "hidden_dim = 128\n",
        "num_heads = 4\n",
        "\n",
        "mlp = MLPClassifier(input_dim, hidden_dim, num_classes)\n",
        "transformer = TransformerClassifier(input_dim, num_heads, hidden_dim, num_classes)\n",
        "\n",
        "print(\"Training MLP...\")\n",
        "mlp, acc_mlp, f1_mlp, roc_mlp = train_model(mlp, X_train, y_train, X_val, y_val)\n",
        "\n",
        "print(\"Training Transformer...\")\n",
        "transformer, acc_trans, f1_trans, roc_trans = train_model(transformer, X_train, y_train, X_val, y_val)\n"
      ],
      "metadata": {
        "id": "7NqdZBb2Lrwa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# STEP 6: Ensemble Prediction (Soft Voting)\n",
        "# ============================================\n",
        "def ensemble_predict(model_mlp, model_trans, X, alpha=0.5):\n",
        "    model_mlp.eval()\n",
        "    model_trans.eval()\n",
        "    with torch.no_grad():\n",
        "        probs_mlp = torch.softmax(model_mlp(X), dim=1)\n",
        "        probs_trans = torch.softmax(model_trans(X), dim=1)\n",
        "        ensemble_probs = alpha * probs_mlp + (1 - alpha) * probs_trans\n",
        "    return ensemble_probs\n",
        "\n",
        "ensemble_probs = ensemble_predict(mlp, transformer, X_val)\n",
        "ensemble_preds = torch.argmax(ensemble_probs, dim=1)\n",
        "\n",
        "acc_ens = accuracy_score(y_val.cpu(), ensemble_preds.cpu())\n",
        "f1_ens = f1_score(y_val.cpu(), ensemble_preds.cpu(), average='macro')\n",
        "roc_ens = roc_auc_score(y_val.cpu(), ensemble_probs.cpu().numpy(), multi_class='ovo')\n",
        "\n",
        "# ============================================\n",
        "# STEP 7: Print Results\n",
        "# ============================================\n",
        "print(f\"\\n--- RESULTS ---\")\n",
        "print(f\"MLP:         Acc={acc_mlp:.3f}, F1={f1_mlp:.3f}, ROC-AUC={roc_mlp:.3f}\")\n",
        "print(f\"Transformer: Acc={acc_trans:.3f}, F1={f1_trans:.3f}, ROC-AUC={roc_trans:.3f}\")\n",
        "print(f\"Ensemble:    Acc={acc_ens:.3f}, F1={f1_ens:.3f}, ROC-AUC={roc_ens:.3f}\")"
      ],
      "metadata": {
        "id": "DL42pG2-L7QU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Get model probabilities for validation set\n",
        "with torch.no_grad():\n",
        "    probs_mlp = torch.softmax(mlp(X_val), dim=1)\n",
        "    probs_trans = torch.softmax(transformer(X_val), dim=1)\n",
        "\n",
        "# Search for best alpha\n",
        "alphas = np.linspace(0, 1, 21)\n",
        "best_alpha, best_roc, best_acc, best_f1 = 0, 0, 0, 0\n",
        "\n",
        "for alpha in alphas:\n",
        "    combined_probs = alpha * probs_mlp + (1 - alpha) * probs_trans\n",
        "    preds = torch.argmax(combined_probs, dim=1)\n",
        "\n",
        "    acc = accuracy_score(y_val.cpu(), preds.cpu())\n",
        "    f1 = f1_score(y_val.cpu(), preds.cpu(), average='macro')\n",
        "    roc = roc_auc_score(y_val.cpu(), combined_probs.cpu().numpy(), multi_class='ovo')\n",
        "\n",
        "    if roc > best_roc:\n",
        "        best_roc = roc\n",
        "        best_alpha = alpha\n",
        "        best_acc = acc\n",
        "        best_f1 = f1\n",
        "\n",
        "print(f\"Best alpha = {best_alpha:.2f}\")\n",
        "print(f\"Optimized Ensemble: Acc={best_acc:.3f}, F1={best_f1:.3f}, ROC-AUC={best_roc:.3f}\")"
      ],
      "metadata": {
        "id": "-wZUpxmLMzxc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Updated performance results\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)']\n",
        "accuracy = [0.662, 0.656, 0.682]  # Use your real values\n",
        "roc_auc = [0.651, 0.738, 0.755]\n",
        "\n",
        "# Compute mean for quadrant shading\n",
        "mean_accuracy = np.mean(accuracy)\n",
        "mean_roc_auc = np.mean(roc_auc)\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "# Set limits based on data range\n",
        "ax.set_xlim(min(accuracy)-0.01, max(accuracy)+0.01)\n",
        "ax.set_ylim(min(roc_auc)-0.02, max(roc_auc)+0.02)\n",
        "\n",
        "# Background quadrant shading\n",
        "ax.axhspan(mean_roc_auc, ax.get_ylim()[1], facecolor='#d1f2eb', alpha=0.4)  # Top\n",
        "ax.axhspan(ax.get_ylim()[0], mean_roc_auc, facecolor='#fdebd0', alpha=0.4)  # Bottom\n",
        "ax.axvspan(mean_accuracy, ax.get_xlim()[1], facecolor='#d6eaf8', alpha=0.4)  # Right\n",
        "ax.axvspan(ax.get_xlim()[0], mean_accuracy, facecolor='#f9ebea', alpha=0.4)  # Left\n",
        "\n",
        "# Plot points for all models\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60']  # Blue=MLP, Orange=Transformer, Green=Ensemble\n",
        "for i in range(len(models)):\n",
        "    ax.scatter(accuracy[i], roc_auc[i], s=500, color=colors[i], edgecolors='black', linewidths=1.5, zorder=5)\n",
        "    ax.text(accuracy[i] + 0.0005, roc_auc[i] + 0.0005, models[i], fontsize=16, weight='bold')\n",
        "\n",
        "# Dashed mean lines\n",
        "ax.axhline(mean_roc_auc, color='gray', linestyle='--', linewidth=1.5)\n",
        "ax.axvline(mean_accuracy, color='gray', linestyle='--', linewidth=1.5)\n",
        "\n",
        "# Quadrant labels\n",
        "ax.text(mean_accuracy + 0.001, mean_roc_auc + 0.001, \"High Accuracy\\nHigh ROC–AUC\", fontsize=16, color='green', weight='bold')\n",
        "ax.text(mean_accuracy + 0.001, ax.get_ylim()[0] + 0.003, \"High Accuracy\", fontsize=16, color='blue', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.001, mean_roc_auc + 0.001, \"High ROC–AUC\", fontsize=16, color='purple', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.001, ax.get_ylim()[0] + 0.003, \"Low Accuracy\\nLow ROC–AUC\", fontsize=16, color='red', weight='bold')\n",
        "\n",
        "# Labels and title\n",
        "ax.set_xlabel('Accuracy', fontsize=20, weight='bold')\n",
        "ax.set_ylabel('ROC–AUC', fontsize=20, weight='bold')\n",
        "ax.set_title('MLP vs Transformer vs Ensemble Trade-off', fontsize=22, weight='bold')\n",
        "ax.tick_params(axis='both', labelsize=16)\n",
        "ax.grid(alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "CmE3ag-gNwbU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Your real results\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)']\n",
        "accuracy = [0.662, 0.656, 0.682]  # Replace with your actual results\n",
        "roc_auc = [0.651, 0.738, 0.755]\n",
        "\n",
        "# Compute mean lines\n",
        "mean_accuracy = np.mean(accuracy)\n",
        "mean_roc_auc = np.mean(roc_auc)\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "# Fix axis limits similar to original style\n",
        "ax.set_xlim(0.58, 0.70)\n",
        "ax.set_ylim(0.64, 0.78)\n",
        "\n",
        "# Background quadrant shading\n",
        "ax.axhspan(mean_roc_auc, ax.get_ylim()[1], facecolor='#d1f2eb', alpha=0.4)  # Top\n",
        "ax.axhspan(ax.get_ylim()[0], mean_roc_auc, facecolor='#fdebd0', alpha=0.4)  # Bottom\n",
        "ax.axvspan(mean_accuracy, ax.get_xlim()[1], facecolor='#d6eaf8', alpha=0.4)  # Right\n",
        "ax.axvspan(ax.get_xlim()[0], mean_accuracy, facecolor='#f9ebea', alpha=0.4)  # Left\n",
        "\n",
        "# Plot points\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60']  # Blue, Orange, Green\n",
        "for i in range(len(models)):\n",
        "    ax.scatter(accuracy[i], roc_auc[i], s=500, color=colors[i], edgecolors='black', linewidths=1.5, zorder=5)\n",
        "    ax.text(accuracy[i] + 0.001, roc_auc[i] + 0.001, models[i], fontsize=18, weight='bold')\n",
        "\n",
        "# Dashed mean lines\n",
        "ax.axhline(mean_roc_auc, color='gray', linestyle='--', linewidth=1.5)\n",
        "ax.axvline(mean_accuracy, color='gray', linestyle='--', linewidth=1.5)\n",
        "\n",
        "# Quadrant labels\n",
        "ax.text(mean_accuracy + 0.001, mean_roc_auc + 0.001, \"High Accuracy\\nHigh ROC–AUC\", fontsize=16, color='green', weight='bold')\n",
        "ax.text(mean_accuracy + 0.001, ax.get_ylim()[0] + 0.003, \"High Accuracy\", fontsize=16, color='blue', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.001, mean_roc_auc + 0.001, \"High ROC–AUC\", fontsize=16, color='purple', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.001, ax.get_ylim()[0] + 0.003, \"Low Accuracy\\nLow ROC–AUC\", fontsize=16, color='red', weight='bold')\n",
        "\n",
        "# Labels and style\n",
        "ax.set_xlabel('Accuracy', fontsize=20, weight='bold')\n",
        "ax.set_ylabel('ROC–AUC', fontsize=20, weight='bold')\n",
        "ax.set_title('MLP vs Transformer vs Ensemble Trade-off', fontsize=22, weight='bold')\n",
        "ax.tick_params(axis='both', labelsize=16)\n",
        "ax.grid(alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "2OTUrETwOM_A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Your real results\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)']\n",
        "accuracy = [0.662, 0.656, 0.682]\n",
        "roc_auc = [0.651, 0.738, 0.755]\n",
        "\n",
        "# Compute mean\n",
        "mean_accuracy = np.mean(accuracy)\n",
        "mean_roc_auc = np.mean(roc_auc)\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "# Fixed axis limits\n",
        "ax.set_xlim(0.58, 0.70)\n",
        "ax.set_ylim(0.64, 0.78)\n",
        "\n",
        "# Background quadrant shading\n",
        "ax.axhspan(mean_roc_auc, ax.get_ylim()[1], facecolor='#d1f2eb', alpha=0.4)\n",
        "ax.axhspan(ax.get_ylim()[0], mean_roc_auc, facecolor='#fdebd0', alpha=0.4)\n",
        "ax.axvspan(mean_accuracy, ax.get_xlim()[1], facecolor='#d6eaf8', alpha=0.4)\n",
        "ax.axvspan(ax.get_xlim()[0], mean_accuracy, facecolor='#f9ebea', alpha=0.4)\n",
        "\n",
        "# Plot points with dynamic label offsets\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60']  # Blue, Orange, Green\n",
        "offsets = [(0.0015, 0.002), (0.0015, -0.002), (0.0015, 0.002)]  # Different offsets for each point\n",
        "\n",
        "for i in range(len(models)):\n",
        "    ax.scatter(accuracy[i], roc_auc[i], s=500, color=colors[i], edgecolors='black', linewidths=1.5, zorder=5)\n",
        "    ax.text(accuracy[i] + offsets[i][0], roc_auc[i] + offsets[i][1], models[i], fontsize=18, weight='bold')\n",
        "\n",
        "# Dashed mean lines\n",
        "ax.axhline(mean_roc_auc, color='gray', linestyle='--', linewidth=1.5)\n",
        "ax.axvline(mean_accuracy, color='gray', linestyle='--', linewidth=1.5)\n",
        "\n",
        "# Quadrant labels\n",
        "ax.text(mean_accuracy + 0.002, mean_roc_auc + 0.001, \"High Accuracy\\nHigh ROC–AUC\", fontsize=16, color='green', weight='bold')\n",
        "ax.text(mean_accuracy + 0.002, ax.get_ylim()[0] + 0.003, \"High Accuracy\", fontsize=16, color='blue', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.002, mean_roc_auc + 0.001, \"High ROC–AUC\", fontsize=16, color='purple', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.002, ax.get_ylim()[0] + 0.003, \"Low Accuracy\\nLow ROC–AUC\", fontsize=16, color='red', weight='bold')\n",
        "\n",
        "# Labels and style\n",
        "ax.set_xlabel('Accuracy', fontsize=20, weight='bold')\n",
        "ax.set_ylabel('ROC–AUC', fontsize=20, weight='bold')\n",
        "ax.set_title('MLP vs Transformer vs Ensemble Trade-off', fontsize=22, weight='bold')\n",
        "ax.tick_params(axis='both', labelsize=16)\n",
        "ax.grid(alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "b2xtWkZlOra4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Model names\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)']\n",
        "\n",
        "# Your real results\n",
        "f1_scores = [0.463, 0.457, 0.478]  # F1 scores\n",
        "roc_auc = [0.651, 0.738, 0.755]    # ROC-AUC\n",
        "\n",
        "# Compute quadrant means\n",
        "mean_f1 = np.mean(f1_scores)\n",
        "mean_roc_auc = np.mean(roc_auc)\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "# Set axis limits (slightly padded)\n",
        "ax.set_xlim(0.44, 0.49)\n",
        "ax.set_ylim(0.64, 0.78)\n",
        "\n",
        "# Background quadrant shading\n",
        "ax.axhspan(mean_roc_auc, ax.get_ylim()[1], facecolor='#d1f2eb', alpha=0.4)  # Top\n",
        "ax.axhspan(ax.get_ylim()[0], mean_roc_auc, facecolor='#fdebd0', alpha=0.4)  # Bottom\n",
        "ax.axvspan(mean_f1, ax.get_xlim()[1], facecolor='#d6eaf8', alpha=0.4)       # Right\n",
        "ax.axvspan(ax.get_xlim()[0], mean_f1, facecolor='#f9ebea', alpha=0.4)       # Left\n",
        "\n",
        "# Plot models with dynamic label offsets\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60']  # Blue, Orange, Green\n",
        "offsets = [(0.0015, 0.002), (0.0015, -0.002), (0.0015, 0.002)]  # text offsets\n",
        "\n",
        "for i in range(len(models)):\n",
        "    ax.scatter(f1_scores[i], roc_auc[i], s=500, color=colors[i], edgecolors='black', linewidths=1.5, zorder=5)\n",
        "    ax.text(f1_scores[i] + offsets[i][0], roc_auc[i] + offsets[i][1], models[i], fontsize=18, weight='bold')\n",
        "\n",
        "# Dashed mean lines\n",
        "ax.axhline(mean_roc_auc, color='gray', linestyle='--', linewidth=1.5)\n",
        "ax.axvline(mean_f1, color='gray', linestyle='--', linewidth=1.5)\n",
        "\n",
        "# Quadrant labels\n",
        "ax.text(mean_f1 + 0.001, mean_roc_auc + 0.001, \"High F1\\nHigh ROC–AUC\", fontsize=16, color='green', weight='bold')\n",
        "ax.text(mean_f1 + 0.001, ax.get_ylim()[0] + 0.003, \"High F1\", fontsize=16, color='blue', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.001, mean_roc_auc + 0.001, \"High ROC–AUC\", fontsize=16, color='purple', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.001, ax.get_ylim()[0] + 0.003, \"Low F1\\nLow ROC–AUC\", fontsize=16, color='red', weight='bold')\n",
        "\n",
        "# Labels and style\n",
        "ax.set_xlabel('F1 Score', fontsize=20, weight='bold')\n",
        "ax.set_ylabel('ROC–AUC', fontsize=20, weight='bold')\n",
        "ax.set_title('F1 vs ROC–AUC Trade-off', fontsize=22, weight='bold')\n",
        "ax.tick_params(axis='both', labelsize=16)\n",
        "ax.grid(alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "yM56JrQoP4XY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Model names\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)']\n",
        "\n",
        "# Your real results\n",
        "accuracy = [0.662, 0.656, 0.682]\n",
        "roc_auc = [0.651, 0.738, 0.755]\n",
        "f1_scores = [0.463, 0.457, 0.478]  # Will determine bubble size\n",
        "\n",
        "# Scale bubble sizes (F1 * scale factor)\n",
        "sizes = [f * 3000 for f in f1_scores]  # Adjust factor for good sizing\n",
        "\n",
        "# Colors for models\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60']\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "# Plot bubbles\n",
        "for i in range(len(models)):\n",
        "    ax.scatter(accuracy[i], roc_auc[i], s=sizes[i], color=colors[i], edgecolors='black', linewidths=1.5, alpha=0.8, label=f\"{models[i]} (F1={f1_scores[i]:.3f})\")\n",
        "\n",
        "# Labels and styling\n",
        "ax.set_xlabel('Accuracy', fontsize=20, weight='bold')\n",
        "ax.set_ylabel('ROC–AUC', fontsize=20, weight='bold')\n",
        "ax.set_title('Model Comparison: Accuracy vs ROC–AUC (Bubble = F1 Score)', fontsize=22, weight='bold')\n",
        "ax.tick_params(axis='both', labelsize=16)\n",
        "\n",
        "# Axis limits for clarity\n",
        "ax.set_xlim(0.64, 0.70)\n",
        "ax.set_ylim(0.64, 0.78)\n",
        "\n",
        "# Add grid and legend\n",
        "ax.grid(alpha=0.3)\n",
        "ax.legend(fontsize=14, loc='lower right')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "dbu91A7lQOAD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Model names\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)']\n",
        "\n",
        "# Metrics\n",
        "accuracy = [0.662, 0.656, 0.682]\n",
        "f1_scores = [0.463, 0.457, 0.478]\n",
        "roc_auc = [0.651, 0.738, 0.755]\n",
        "\n",
        "# Combine into array\n",
        "metrics = [accuracy, f1_scores, roc_auc]\n",
        "labels = ['Accuracy', 'F1 Score', 'ROC–AUC']\n",
        "\n",
        "# Normalize to [0,1] for fair comparison in radar chart\n",
        "data = np.array(metrics).T\n",
        "data_norm = data / np.max(data, axis=0)  # Normalize each metric across models\n",
        "\n",
        "# Angles for radar chart\n",
        "angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()\n",
        "angles += angles[:1]\n",
        "\n",
        "# Colors for each model\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60']\n",
        "\n",
        "# Initialize plot\n",
        "fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\n",
        "\n",
        "# Plot each model\n",
        "for i in range(len(models)):\n",
        "    values = data_norm[i].tolist()\n",
        "    values += values[:1]  # Close the polygon\n",
        "    ax.plot(angles, values, color=colors[i], linewidth=2, label=models[i])\n",
        "    ax.fill(angles, values, color=colors[i], alpha=0.25)\n",
        "\n",
        "# Set axis labels\n",
        "ax.set_xticks(angles[:-1])\n",
        "ax.set_xticklabels(labels, fontsize=14, weight='bold')\n",
        "ax.set_yticklabels([])  # Hide radial ticks for clarity\n",
        "ax.set_title(\"Model Performance Comparison (Normalized)\", fontsize=18, weight='bold', pad=20)\n",
        "\n",
        "# Add legend\n",
        "ax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1), fontsize=12)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "WkajAQ_5Qbxt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Model names\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)']\n",
        "\n",
        "# Metrics\n",
        "accuracy = [0.662, 0.656, 0.682]\n",
        "roc_auc = [0.651, 0.738, 0.755]\n",
        "f1_scores = [0.463, 0.457, 0.478]\n",
        "\n",
        "# Scale bubble sizes\n",
        "sizes = [f * 4000 for f in f1_scores]  # Adjust for visibility\n",
        "\n",
        "# Colors\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60']\n",
        "\n",
        "# Plot\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "for i in range(len(models)):\n",
        "    ax.scatter(accuracy[i], roc_auc[i], s=sizes[i], color=colors[i], alpha=0.8, edgecolors='black', linewidths=1.5)\n",
        "    ax.text(accuracy[i], roc_auc[i], models[i], fontsize=14, weight='bold', ha='center', va='center', color='white')\n",
        "\n",
        "# Labels and styling\n",
        "ax.set_xlabel('Accuracy', fontsize=18, weight='bold')\n",
        "ax.set_ylabel('ROC–AUC', fontsize=18, weight='bold')\n",
        "ax.set_title('Model Performance Bubble Chart (Bubble Size = F1)', fontsize=20, weight='bold')\n",
        "\n",
        "# Axis range for better view\n",
        "ax.set_xlim(0.64, 0.70)\n",
        "ax.set_ylim(0.64, 0.78)\n",
        "\n",
        "ax.grid(alpha=0.3)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "QAeY9to0RTD2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "sTZNBBI5RSns"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "\n",
        "# Model names\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)']\n",
        "\n",
        "# Metrics\n",
        "accuracy = [0.662, 0.656, 0.682]\n",
        "roc_auc = [0.651, 0.738, 0.755]\n",
        "f1_scores = [0.463, 0.457, 0.478]\n",
        "\n",
        "# Normalize sizes for bubbles\n",
        "sizes = [f * 4000 for f in f1_scores]  # Adjust scale for visibility\n",
        "\n",
        "# Create colormap for F1 score\n",
        "cmap = sns.color_palette(\"viridis\", as_cmap=True)\n",
        "\n",
        "# Figure\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "# Scatter plot (bubble heatmap)\n",
        "scatter = ax.scatter(accuracy, roc_auc, s=sizes, c=f1_scores, cmap=cmap, alpha=0.85, edgecolors='black', linewidths=1.5)\n",
        "\n",
        "# Add annotations for model names\n",
        "for i, model in enumerate(models):\n",
        "    ax.text(accuracy[i] + 0.0005, roc_auc[i] + 0.001, model, fontsize=14, weight='bold')\n",
        "\n",
        "# Color bar for F1 score\n",
        "cbar = plt.colorbar(scatter, ax=ax)\n",
        "cbar.set_label('F1 Score', fontsize=16, weight='bold')\n",
        "\n",
        "# Labels and title\n",
        "ax.set_xlabel('Accuracy', fontsize=18, weight='bold')\n",
        "ax.set_ylabel('ROC–AUC', fontsize=18, weight='bold')\n",
        "ax.set_title('Model Performance: Accuracy vs ROC–AUC (Color & Size = F1)', fontsize=20, weight='bold')\n",
        "\n",
        "# Axis limits\n",
        "ax.set_xlim(0.64, 0.70)\n",
        "ax.set_ylim(0.64, 0.78)\n",
        "\n",
        "# Grid & style\n",
        "ax.tick_params(axis='both', labelsize=14)\n",
        "ax.grid(alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "OS1yqnjfRc0g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Data\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)']\n",
        "f1_scores = [0.463, 0.457, 0.478]\n",
        "\n",
        "# Create bar plot\n",
        "fig, ax = plt.subplots(figsize=(8, 6))\n",
        "sns.barplot(x=models, y=f1_scores, palette=['#2980b9', '#e67e22', '#27ae60'], edgecolor='black')\n",
        "\n",
        "# Add text labels on bars\n",
        "for i, v in enumerate(f1_scores):\n",
        "    ax.text(i, v + 0.002, f\"{v:.3f}\", ha='center', fontsize=14, weight='bold')\n",
        "\n",
        "# Labels and title\n",
        "ax.set_ylabel('F1 Score', fontsize=18, weight='bold')\n",
        "ax.set_xlabel('Models', fontsize=18, weight='bold')\n",
        "ax.set_title('F1 Score Comparison', fontsize=20, weight='bold')\n",
        "ax.tick_params(axis='both', labelsize=14)\n",
        "ax.set_ylim(0.44, 0.49)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "2METcWf8RsHh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, f1_score, roc_auc_score\n",
        "\n",
        "# Step 1: Get predicted probabilities from base models\n",
        "with torch.no_grad():\n",
        "    probs_mlp = torch.softmax(mlp(X_val), dim=1).cpu().numpy()\n",
        "    probs_trans = torch.softmax(transformer(X_val), dim=1).cpu().numpy()\n",
        "\n",
        "# Step 2: Combine probabilities into new feature matrix\n",
        "# For each sample: concatenate [MLP_probs | Transformer_probs]\n",
        "stacked_features = np.hstack((probs_mlp, probs_trans))\n",
        "\n",
        "# Step 3: Train Logistic Regression meta-learner\n",
        "meta_model = LogisticRegression(max_iter=1000)\n",
        "meta_model.fit(stacked_features, y_val.cpu().numpy())\n",
        "\n",
        "# Step 4: Predict and evaluate\n",
        "stacked_preds = meta_model.predict(stacked_features)\n",
        "stacked_probs = meta_model.predict_proba(stacked_features)\n",
        "\n",
        "# Metrics\n",
        "acc_stack = accuracy_score(y_val.cpu(), stacked_preds)\n",
        "f1_stack = f1_score(y_val.cpu(), stacked_preds, average='macro')\n",
        "roc_stack = roc_auc_score(y_val.cpu(), stacked_probs, multi_class='ovo')\n",
        "\n",
        "print(f\"Stacking Ensemble: Acc={acc_stack:.3f}, F1={f1_stack:.3f}, ROC-AUC={roc_stack:.3f}\")"
      ],
      "metadata": {
        "id": "3uoecbOnS1kG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Model names\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)', 'Stacked Ensemble']\n",
        "\n",
        "# Real results (replace stacked values with actual)\n",
        "f1_scores = [0.463, 0.457, 0.478, 0.490]  # Add stacked ensemble F1\n",
        "roc_auc = [0.651, 0.738, 0.755, 0.765]    # Add stacked ensemble ROC–AUC\n",
        "\n",
        "# Compute mean for quadrant shading\n",
        "mean_f1 = np.mean(f1_scores)\n",
        "mean_roc_auc = np.mean(roc_auc)\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "# Axis limits (slightly padded)\n",
        "ax.set_xlim(0.44, 0.50)\n",
        "ax.set_ylim(0.64, 0.78)\n",
        "\n",
        "# Background shading for quadrants\n",
        "ax.axhspan(mean_roc_auc, ax.get_ylim()[1], facecolor='#d1f2eb', alpha=0.4)\n",
        "ax.axhspan(ax.get_ylim()[0], mean_roc_auc, facecolor='#fdebd0', alpha=0.4)\n",
        "ax.axvspan(mean_f1, ax.get_xlim()[1], facecolor='#d6eaf8', alpha=0.4)\n",
        "ax.axvspan(ax.get_xlim()[0], mean_f1, facecolor='#f9ebea', alpha=0.4)\n",
        "\n",
        "# Plot points with dynamic offsets\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60', '#8e44ad']  # Add purple for stacked\n",
        "offsets = [\n",
        "    (0.0015, 0.002),   # MLP\n",
        "    (0.0015, -0.002),  # Transformer\n",
        "    (0.0015, 0.002),   # Ensemble\n",
        "    (0.0015, -0.002)   # Stacked Ensemble\n",
        "]\n",
        "\n",
        "for i in range(len(models)):\n",
        "    ax.scatter(f1_scores[i], roc_auc[i], s=550, color=colors[i], edgecolors='black', linewidths=1.5, zorder=5)\n",
        "    ax.text(f1_scores[i] + offsets[i][0], roc_auc[i] + offsets[i][1], models[i], fontsize=15, weight='bold')\n",
        "\n",
        "# Dashed mean lines\n",
        "ax.axhline(mean_roc_auc, color='gray', linestyle='--', linewidth=1.5)\n",
        "ax.axvline(mean_f1, color='gray', linestyle='--', linewidth=1.5)\n",
        "\n",
        "# Quadrant labels\n",
        "ax.text(mean_f1 + 0.001, mean_roc_auc + 0.001, \"High F1\\nHigh ROC–AUC\", fontsize=16, color='green', weight='bold')\n",
        "ax.text(mean_f1 + 0.001, ax.get_ylim()[0] + 0.003, \"High F1\", fontsize=16, color='blue', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.001, mean_roc_auc + 0.001, \"High ROC–AUC\", fontsize=16, color='purple', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.001, ax.get_ylim()[0] + 0.003, \"Low F1\\nLow ROC–AUC\", fontsize=16, color='red', weight='bold')\n",
        "\n",
        "# Labels and style\n",
        "ax.set_xlabel('F1 Score', fontsize=20, weight='bold')\n",
        "ax.set_ylabel('ROC–AUC', fontsize=20, weight='bold')\n",
        "ax.set_title('F1 vs ROC–AUC Trade-off (4 Models)', fontsize=22, weight='bold')\n",
        "ax.tick_params(axis='both', labelsize=16)\n",
        "ax.grid(alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "lb57CCVuTi2Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Model names\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)', 'Stacked Ensemble']\n",
        "\n",
        "# Actual metrics\n",
        "f1_scores = [0.463, 0.457, 0.478, 0.493]\n",
        "roc_auc = [0.651, 0.738, 0.755, 0.804]\n",
        "\n",
        "# Compute quadrant means\n",
        "mean_f1 = np.mean(f1_scores)\n",
        "mean_roc_auc = np.mean(roc_auc)\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "# Axis limits (slightly padded)\n",
        "ax.set_xlim(0.44, 0.50)\n",
        "ax.set_ylim(0.64, 0.82)\n",
        "\n",
        "# Background quadrant shading\n",
        "ax.axhspan(mean_roc_auc, ax.get_ylim()[1], facecolor='#d1f2eb', alpha=0.4)\n",
        "ax.axhspan(ax.get_ylim()[0], mean_roc_auc, facecolor='#fdebd0', alpha=0.4)\n",
        "ax.axvspan(mean_f1, ax.get_xlim()[1], facecolor='#d6eaf8', alpha=0.4)\n",
        "ax.axvspan(ax.get_xlim()[0], mean_f1, facecolor='#f9ebea', alpha=0.4)\n",
        "\n",
        "# Plot models with dynamic label offsets\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60', '#8e44ad']  # Blue, Orange, Green, Purple\n",
        "offsets = [(0.0015, 0.002), (0.0015, -0.002), (0.0015, 0.002), (0.0015, -0.002)]\n",
        "\n",
        "for i in range(len(models)):\n",
        "    ax.scatter(f1_scores[i], roc_auc[i], s=550, color=colors[i], edgecolors='black', linewidths=1.5, zorder=5)\n",
        "    ax.text(f1_scores[i] + offsets[i][0], roc_auc[i] + offsets[i][1], models[i], fontsize=15, weight='bold')\n",
        "\n",
        "# Dashed mean lines\n",
        "ax.axhline(mean_roc_auc, color='gray', linestyle='--', linewidth=1.5)\n",
        "ax.axvline(mean_f1, color='gray', linestyle='--', linewidth=1.5)\n",
        "\n",
        "# Quadrant labels\n",
        "ax.text(mean_f1 + 0.001, mean_roc_auc + 0.001, \"High F1\\nHigh ROC–AUC\", fontsize=16, color='green', weight='bold')\n",
        "ax.text(mean_f1 + 0.001, ax.get_ylim()[0] + 0.003, \"High F1\", fontsize=16, color='blue', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.001, mean_roc_auc + 0.001, \"High ROC–AUC\", fontsize=16, color='purple', weight='bold')\n",
        "ax.text(ax.get_xlim()[0] + 0.001, ax.get_ylim()[0] + 0.003, \"Low F1\\nLow ROC–AUC\", fontsize=16, color='red', weight='bold')\n",
        "\n",
        "# Labels and style\n",
        "ax.set_xlabel('F1 Score', fontsize=20, weight='bold')\n",
        "ax.set_ylabel('ROC–AUC', fontsize=20, weight='bold')\n",
        "ax.set_title('F1 vs ROC–AUC Trade-off (4 Models)', fontsize=22, weight='bold')\n",
        "ax.tick_params(axis='both', labelsize=16)\n",
        "ax.grid(alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "VgoO12cXT1h0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Model names and metrics\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)', 'Stacked Ensemble']\n",
        "f1_scores = [0.463, 0.457, 0.478, 0.493]\n",
        "\n",
        "# Colors for bars\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60', '#8e44ad']  # Blue, Orange, Green, Purple\n",
        "\n",
        "# Plot\n",
        "fig, ax = plt.subplots(figsize=(8, 6))\n",
        "bars = ax.bar(models, f1_scores, color=colors, edgecolor='black')\n",
        "\n",
        "# Add F1 values on top of bars\n",
        "for bar, score in zip(bars, f1_scores):\n",
        "    height = bar.get_height()\n",
        "    ax.text(bar.get_x() + bar.get_width()/2, height + 0.002, f'{score:.3f}',\n",
        "            ha='center', va='bottom', fontsize=14, weight='bold')\n",
        "\n",
        "# Labels and style\n",
        "ax.set_title('F1 Score Comparison Across Models', fontsize=20, weight='bold')\n",
        "ax.set_ylabel('F1 Score', fontsize=16, weight='bold')\n",
        "ax.set_ylim(0.44, 0.51)\n",
        "ax.tick_params(axis='x', rotation=10, labelsize=14)\n",
        "ax.grid(axis='y', linestyle='--', alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "iKklre1xU-O0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Data\n",
        "models = ['MLP', 'Transformer', 'Ensemble (α=0.10)', 'Stacked Ensemble']\n",
        "f1_scores = [0.463, 0.457, 0.478, 0.493]\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60', '#8e44ad']\n",
        "\n",
        "# Plot\n",
        "fig, ax = plt.subplots(figsize=(9, 6))\n",
        "bars = ax.bar(models, f1_scores, color=colors, edgecolor='black', width=0.6)\n",
        "\n",
        "# Add values on top of bars\n",
        "for bar, score in zip(bars, f1_scores):\n",
        "    height = bar.get_height()\n",
        "    ax.text(bar.get_x() + bar.get_width()/2, height + 0.002, f'{score:.3f}',\n",
        "            ha='center', va='bottom', fontsize=14, weight='bold')\n",
        "\n",
        "# Labels and style\n",
        "ax.set_title('F1 Score Comparison Across Models', fontsize=22, weight='bold', pad=15)\n",
        "ax.set_ylabel('F1 Score', fontsize=18, weight='bold')\n",
        "ax.set_ylim(0.44, 0.51)\n",
        "ax.tick_params(axis='x', labelsize=16)  # No rotation\n",
        "ax.tick_params(axis='y', labelsize=14)\n",
        "ax.grid(axis='y', linestyle='--', alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "1moOc9-SVR92"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "from sklearn.preprocessing import label_binarize\n",
        "import numpy as np\n",
        "\n",
        "# Assume you already have:\n",
        "# stacked_probs = meta_model.predict_proba(stacked_features)  # shape: (n_samples, n_classes)\n",
        "# y_val = actual labels (torch tensor or numpy)\n",
        "\n",
        "# Convert y_val to numpy\n",
        "y_true = y_val.cpu().numpy()\n",
        "\n",
        "# Binarize labels for multi-class ROC (One-vs-Rest)\n",
        "n_classes = stacked_probs.shape[1]\n",
        "y_bin = label_binarize(y_true, classes=np.arange(n_classes))\n",
        "\n",
        "# Compute ROC curve and AUC for each class\n",
        "fpr = dict()\n",
        "tpr = dict()\n",
        "roc_auc = dict()\n",
        "for i in range(n_classes):\n",
        "    fpr[i], tpr[i], _ = roc_curve(y_bin[:, i], stacked_probs[:, i])\n",
        "    roc_auc[i] = auc(fpr[i], tpr[i])\n",
        "\n",
        "# Compute macro-average ROC curve and AUC\n",
        "all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))\n",
        "mean_tpr = np.zeros_like(all_fpr)\n",
        "for i in range(n_classes):\n",
        "    mean_tpr += np.interp(all_fpr, fpr[i], tpr[i])\n",
        "mean_tpr /= n_classes\n",
        "\n",
        "fpr[\"macro\"] = all_fpr\n",
        "tpr[\"macro\"] = mean_tpr\n",
        "roc_auc[\"macro\"] = auc(fpr[\"macro\"], tpr[\"macro\"])\n",
        "\n",
        "# Plot ROC curves\n",
        "plt.figure(figsize=(8, 8))\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60', '#8e44ad']\n",
        "class_labels = ['H', 'D0', 'D3', 'D7']\n",
        "\n",
        "for i, color in enumerate(colors):\n",
        "    plt.plot(fpr[i], tpr[i], color=color, lw=2,\n",
        "             label=f'{class_labels[i]} (AUC = {roc_auc[i]:.3f})')\n",
        "\n",
        "# Macro-average\n",
        "plt.plot(fpr[\"macro\"], tpr[\"macro\"], color='black', linestyle='--', lw=2,\n",
        "         label=f'Macro-average (AUC = {roc_auc[\"macro\"]:.3f})')\n",
        "\n",
        "# Diagonal\n",
        "plt.plot([0, 1], [0, 1], 'k--', lw=1)\n",
        "\n",
        "plt.xlim([0.0, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('False Positive Rate', fontsize=16, weight='bold')\n",
        "plt.ylabel('True Positive Rate', fontsize=16, weight='bold')\n",
        "plt.title('ROC Curves per Class (Stacked Ensemble)', fontsize=18, weight='bold')\n",
        "plt.legend(loc='lower right', fontsize=12)\n",
        "plt.grid(alpha=0.3)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "wcz0GMzIag_I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "bdObMMlzagyP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "print(Counter(y_true))  # Check class counts"
      ],
      "metadata": {
        "id": "ZGTgeFA4bhGr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import StratifiedKFold\n",
        "from sklearn.metrics import accuracy_score, f1_score, roc_auc_score\n",
        "import numpy as np\n",
        "import torch\n",
        "\n",
        "# Assuming X and y are numpy arrays\n",
        "kfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "acc_scores, f1_scores, roc_scores = [], [], []\n",
        "\n",
        "for fold, (train_idx, val_idx) in enumerate(kfold.split(X, y)):\n",
        "    print(f\"Fold {fold+1}\")\n",
        "\n",
        "    # Split data\n",
        "    X_train, X_val = X[train_idx], X[val_idx]\n",
        "    y_train, y_val = y[train_idx], y[val_idx]\n",
        "\n",
        "    # Train MLP & Transformer (reuse your existing training code)\n",
        "    # Example: mlp_model, transformer_model = train_models(X_train, y_train, X_val, y_val)\n",
        "\n",
        "    # Get probabilities from both models\n",
        "    with torch.no_grad():\n",
        "        probs_mlp = torch.softmax(mlp(torch.tensor(X_val).float()), dim=1).numpy()\n",
        "        probs_trans = torch.softmax(transformer(torch.tensor(X_val).float()), dim=1).numpy()\n",
        "\n",
        "    # Stack features and train meta-learner\n",
        "    stacked_features = np.hstack((probs_mlp, probs_trans))\n",
        "    meta_model = LogisticRegression(max_iter=1000)\n",
        "    meta_model.fit(stacked_features, y_val)  # Ideally use inner validation loop for meta-learner\n",
        "\n",
        "    preds = meta_model.predict(stacked_features)\n",
        "    probs = meta_model.predict_proba(stacked_features)\n",
        "\n",
        "    # Metrics\n",
        "    acc_scores.append(accuracy_score(y_val, preds))\n",
        "    f1_scores.append(f1_score(y_val, preds, average='macro'))\n",
        "    roc_scores.append(roc_auc_score(y_val, probs, multi_class='ovo'))\n",
        "\n",
        "# Print results\n",
        "print(f\"Accuracy: {np.mean(acc_scores):.3f} ± {np.std(acc_scores):.3f}\")\n",
        "print(f\"F1 Score: {np.mean(f1_scores):.3f} ± {np.std(f1_scores):.3f}\")\n",
        "print(f\"ROC-AUC: {np.mean(roc_scores):.3f} ± {np.std(roc_scores):.3f}\")"
      ],
      "metadata": {
        "id": "92_aS8HzddEL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Metrics and values\n",
        "metrics = ['Accuracy', 'F1 Score', 'ROC–AUC']\n",
        "means = [0.639, 0.437, 0.807]\n",
        "stds = [0.035, 0.053, 0.021]\n",
        "\n",
        "# Colors\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60']\n",
        "\n",
        "# Plot\n",
        "fig, ax = plt.subplots(figsize=(8, 6))\n",
        "bars = ax.bar(metrics, means, yerr=stds, capsize=8, color=colors, edgecolor='black')\n",
        "\n",
        "# Add values on top of bars\n",
        "for i, bar in enumerate(bars):\n",
        "    ax.text(bar.get_x() + bar.get_width()/2, means[i] + stds[i] + 0.005,\n",
        "            f'{means[i]:.3f}', ha='center', fontsize=14, weight='bold')\n",
        "\n",
        "# Labels and style\n",
        "ax.set_ylim(0.3, 0.9)\n",
        "ax.set_ylabel('Score', fontsize=18, weight='bold')\n",
        "ax.set_title('5-Fold Cross-Validation Performance', fontsize=20, weight='bold')\n",
        "ax.tick_params(axis='both', labelsize=14)\n",
        "ax.grid(axis='y', linestyle='--', alpha=0.3)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "RNMqascdeUCz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "from sklearn.preprocessing import label_binarize\n",
        "\n",
        "# Example: store FPR and TPR for each fold and class\n",
        "# Assuming you already computed stacked_probs and y_true for each fold\n",
        "# We'll simulate this structure for illustration:\n",
        "# folds_fpr, folds_tpr = list of arrays for macro-average per fold\n",
        "# folds_auc = list of AUC values per fold\n",
        "\n",
        "folds_fpr = []\n",
        "folds_tpr = []\n",
        "folds_auc = []\n",
        "\n",
        "n_classes = stacked_probs.shape[1]  # Number of classes\n",
        "\n",
        "for fold, (train_idx, val_idx) in enumerate(kfold.split(X, y)):\n",
        "    # Extract data for this fold\n",
        "    y_val_fold = y[val_idx]\n",
        "    y_val_bin = label_binarize(y_val_fold, classes=np.arange(n_classes))\n",
        "\n",
        "    # Get probabilities from meta-model (after training on this fold)\n",
        "    probs_fold = meta_model.predict_proba(stacked_features)  # shape: [samples, classes]\n",
        "\n",
        "    # Compute macro-average ROC curve for this fold\n",
        "    fpr_dict = dict()\n",
        "    tpr_dict = dict()\n",
        "    for i in range(n_classes):\n",
        "        fpr_i, tpr_i, _ = roc_curve(y_val_bin[:, i], probs_fold[:, i])\n",
        "        fpr_dict[i] = fpr_i\n",
        "        tpr_dict[i] = tpr_i\n",
        "\n",
        "    # Aggregate FPR for macro-average\n",
        "    all_fpr = np.unique(np.concatenate([fpr_dict[i] for i in range(n_classes)]))\n",
        "    mean_tpr = np.zeros_like(all_fpr)\n",
        "    for i in range(n_classes):\n",
        "        mean_tpr += np.interp(all_fpr, fpr_dict[i], tpr_dict[i])\n",
        "    mean_tpr /= n_classes\n",
        "\n",
        "    folds_fpr.append(all_fpr)\n",
        "    folds_tpr.append(mean_tpr)\n",
        "    folds_auc.append(auc(all_fpr, mean_tpr))\n",
        "\n",
        "# Interpolate all folds to the same FPR grid\n",
        "mean_fpr = np.linspace(0, 1, 100)\n",
        "interp_tprs = []\n",
        "for fpr, tpr in zip(folds_fpr, folds_tpr):\n",
        "    interp_tpr = np.interp(mean_fpr, fpr, tpr)\n",
        "    interp_tprs.append(interp_tpr)\n",
        "\n",
        "interp_tprs = np.array(interp_tprs)\n",
        "mean_tpr = interp_tprs.mean(axis=0)\n",
        "std_tpr = interp_tprs.std(axis=0)\n",
        "\n",
        "mean_auc = np.mean(folds_auc)\n",
        "std_auc = np.std(folds_auc)\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(8, 8))\n",
        "plt.plot(mean_fpr, mean_tpr, color='#27ae60', lw=2,\n",
        "         label=f'Mean ROC (AUC = {mean_auc:.3f} ± {std_auc:.3f})')\n",
        "plt.fill_between(mean_fpr, mean_tpr - std_tpr, mean_tpr + std_tpr,\n",
        "                 color='#27ae60', alpha=0.2, label='±1 SD')\n",
        "\n",
        "# Diagonal line\n",
        "plt.plot([0, 1], [0, 1], 'k--', lw=1)\n",
        "\n",
        "# Style\n",
        "plt.xlim([0, 1])\n",
        "plt.ylim([0, 1.05])\n",
        "plt.xlabel('False Positive Rate', fontsize=16, weight='bold')\n",
        "plt.ylabel('True Positive Rate', fontsize=16, weight='bold')\n",
        "plt.title('Macro-Average ROC Across 5 Folds', fontsize=18, weight='bold')\n",
        "plt.legend(loc='lower right', fontsize=12)\n",
        "plt.grid(alpha=0.3)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Mz8j1tNKgRjz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for fold, (train_idx, val_idx) in enumerate(kfold.split(X, y)):\n",
        "    print(f\"Processing Fold {fold+1}...\")\n",
        "\n",
        "    # Split fold data\n",
        "    X_train, X_val = X[train_idx], X[val_idx]\n",
        "    y_train, y_val_fold = y[train_idx], y[val_idx]\n",
        "\n",
        "    # Convert to tensor for DL models\n",
        "    X_val_tensor = torch.tensor(X_val, dtype=torch.float32).to(device)\n",
        "\n",
        "    # Predict probabilities from base models for validation set\n",
        "    with torch.no_grad():\n",
        "        probs_mlp = torch.softmax(mlp(X_val_tensor), dim=1).cpu().numpy()\n",
        "        probs_trans = torch.softmax(transformer(X_val_tensor), dim=1).cpu().numpy()\n",
        "\n",
        "    # Combine predictions for meta-learner input\n",
        "    stacked_features = np.hstack((probs_mlp, probs_trans))\n",
        "\n",
        "    # Binarize y_val for ROC\n",
        "    y_val_bin = label_binarize(y_val_fold, classes=np.arange(n_classes))\n",
        "\n",
        "    # Fit meta-learner on validation predictions (or reuse trained model if using nested CV)\n",
        "    meta_model = LogisticRegression(max_iter=1000)\n",
        "    meta_model.fit(stacked_features, y_val_fold)\n",
        "    probs_fold = meta_model.predict_proba(stacked_features)\n",
        "\n",
        "    # Compute macro-average ROC for this fold\n",
        "    fpr_dict = dict()\n",
        "    tpr_dict = dict()\n",
        "    for i in range(n_classes):\n",
        "        fpr_i, tpr_i, _ = roc_curve(y_val_bin[:, i], probs_fold[:, i])\n",
        "        fpr_dict[i] = fpr_i\n",
        "        tpr_dict[i] = tpr_i\n",
        "\n",
        "    # Aggregate FPR for macro-average\n",
        "    all_fpr = np.unique(np.concatenate([fpr_dict[i] for i in range(n_classes)]))\n",
        "    mean_tpr = np.zeros_like(all_fpr)\n",
        "    for i in range(n_classes):\n",
        "        mean_tpr += np.interp(all_fpr, fpr_dict[i], tpr_dict[i])\n",
        "    mean_tpr /= n_classes\n",
        "\n",
        "    folds_fpr.append(all_fpr)\n",
        "    folds_tpr.append(mean_tpr)\n",
        "    folds_auc.append(auc(all_fpr, mean_tpr))\n"
      ],
      "metadata": {
        "id": "UOdNn3njglv5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "from sklearn.preprocessing import label_binarize\n",
        "\n",
        "# Assuming you already have:\n",
        "# meta_model = trained stacked ensemble (Logistic Regression)\n",
        "# probs_test = meta_model.predict_proba(stacked_features_test)  # shape: (n_samples, n_classes)\n",
        "# y_test = true labels for external validation or hold-out set\n",
        "\n",
        "n_classes = probs_test.shape[1]\n",
        "\n",
        "# Binarize labels for ROC computation\n",
        "y_test_bin = label_binarize(y_test, classes=np.arange(n_classes))\n",
        "\n",
        "# Compute ROC for each class\n",
        "fpr = {}\n",
        "tpr = {}\n",
        "roc_auc = {}\n",
        "for i in range(n_classes):\n",
        "    fpr[i], tpr[i], _ = roc_curve(y_test_bin[:, i], probs_test[:, i])\n",
        "    roc_auc[i] = auc(fpr[i], tpr[i])\n",
        "\n",
        "# Compute macro-average ROC\n",
        "all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))\n",
        "mean_tpr = np.zeros_like(all_fpr)\n",
        "for i in range(n_classes):\n",
        "    mean_tpr += np.interp(all_fpr, fpr[i], tpr[i])\n",
        "mean_tpr /= n_classes\n",
        "roc_auc[\"macro\"] = auc(all_fpr, mean_tpr)\n",
        "\n",
        "# Plot ROC curves\n",
        "plt.figure(figsize=(8, 8))\n",
        "colors = ['#2980b9', '#e67e22', '#27ae60', '#8e44ad']  # Colors per class\n",
        "class_labels = ['Healthy', 'Day 0', 'Day 3', 'Day 7']\n",
        "\n",
        "for i, color in enumerate(colors):\n",
        "    plt.plot(fpr[i], tpr[i], color=color, lw=2,\n",
        "             label=f'{class_labels[i]} (AUC = {roc_auc[i]:.3f})')\n",
        "\n",
        "# Macro-average curve\n",
        "plt.plot(all_fpr, mean_tpr, color='black', linestyle='--', lw=2,\n",
        "         label=f'Macro-average (AUC = {roc_auc[\"macro\"]:.3f})')\n",
        "\n",
        "# Random baseline\n",
        "plt.plot([0, 1], [0, 1], 'k--', lw=1)\n",
        "\n",
        "# Style\n",
        "plt.xlim([0, 1])\n",
        "plt.ylim([0, 1.05])\n",
        "plt.xlabel('False Positive Rate', fontsize=16, weight='bold')\n",
        "plt.ylabel('True Positive Rate', fontsize=16, weight='bold')\n",
        "plt.title('ROC Curve (Stacked Ensemble Validation)', fontsize=18, weight='bold')\n",
        "plt.legend(loc='lower right', fontsize=12)\n",
        "plt.grid(alpha=0.3)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "Tsbzw03ticdD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "from sklearn.preprocessing import label_binarize\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "import torch\n",
        "\n",
        "# Assume X, y are numpy arrays, mlp and transformer are trained models\n",
        "n_classes = len(np.unique(y))\n",
        "mean_fpr = np.linspace(0, 1, 100)\n",
        "interp_tprs = []\n",
        "folds_auc = []\n",
        "\n",
        "# Class labels for legend\n",
        "class_labels = ['Healthy', 'Day 0', 'Day 3', 'Day 7']\n",
        "\n",
        "kfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "for fold, (train_idx, val_idx) in enumerate(kfold.split(X, y)):\n",
        "    print(f\"Fold {fold+1}\")\n",
        "\n",
        "    # Split data\n",
        "    X_val = X[val_idx]\n",
        "    y_val_fold = y[val_idx]\n",
        "\n",
        "    # Convert to tensor and predict base model probabilities\n",
        "    X_val_tensor = torch.tensor(X_val, dtype=torch.float32)\n",
        "    with torch.no_grad():\n",
        "        probs_mlp = torch.softmax(mlp(X_val_tensor), dim=1).numpy()\n",
        "        probs_trans = torch.softmax(transformer(X_val_tensor), dim=1).numpy()\n",
        "\n",
        "    # Stack features for meta-learner\n",
        "    stacked_features = np.hstack((probs_mlp, probs_trans))\n",
        "\n",
        "    # Train meta-model (Logistic Regression) on current fold validation\n",
        "    meta_model = LogisticRegression(max_iter=1000)\n",
        "    meta_model.fit(stacked_features, y_val_fold)\n",
        "    probs_fold = meta_model.predict_proba(stacked_features)\n",
        "\n",
        "    # Binarize labels\n",
        "    y_val_bin = label_binarize(y_val_fold, classes=np.arange(n_classes))\n",
        "\n",
        "    # Compute ROC for this fold (macro-average)\n",
        "    fpr_dict, tpr_dict = {}, {}\n",
        "    for i in range(n_classes):\n",
        "        fpr_i, tpr_i, _ = roc_curve(y_val_bin[:, i], probs_fold[:, i])\n",
        "        fpr_dict[i], tpr_dict[i] = fpr_i, tpr_i\n",
        "\n",
        "    all_fpr = np.unique(np.concatenate([fpr_dict[i] for i in range(n_classes)]))\n",
        "    mean_tpr = np.zeros_like(all_fpr)\n",
        "    for i in range(n_classes):\n",
        "        mean_tpr += np.interp(all_fpr, fpr_dict[i], tpr_dict[i])\n",
        "    mean_tpr /= n_classes\n",
        "\n",
        "    interp_tpr = np.interp(mean_fpr, all_fpr, mean_tpr)\n",
        "    interp_tprs.append(interp_tpr)\n",
        "    folds_auc.append(auc(all_fpr, mean_tpr))\n",
        "\n",
        "# Compute mean ± SD ROC curve\n",
        "interp_tprs = np.array(interp_tprs)\n",
        "mean_tpr = interp_tprs.mean(axis=0)\n",
        "std_tpr = interp_tprs.std(axis=0)\n",
        "mean_auc = np.mean(folds_auc)\n",
        "std_auc = np.std(folds_auc)\n",
        "\n",
        "# ---- Plot Macro ROC ----\n",
        "plt.figure(figsize=(8, 8))\n",
        "plt.plot(mean_fpr, mean_tpr, color='#27ae60', lw=2,\n",
        "         label=f'Mean ROC (AUC = {mean_auc:.3f} ± {std_auc:.3f})')\n",
        "plt.fill_between(mean_fpr, mean_tpr - std_tpr, mean_tpr + std_tpr,\n",
        "                 color='#27ae60', alpha=0.2, label='±1 SD')\n",
        "\n",
        "plt.plot([0, 1], [0, 1], 'k--', lw=1)\n",
        "plt.xlim([0, 1])\n",
        "plt.ylim([0, 1.05])\n",
        "plt.xlabel('False Positive Rate', fontsize=16, weight='bold')\n",
        "plt.ylabel('True Positive Rate', fontsize=16, weight='bold')\n",
        "plt.title('Stacked Ensemble ROC Curve (5-Fold CV)', fontsize=18, weight='bold')\n",
        "plt.legend(loc='lower right', fontsize=12)\n",
        "plt.grid(alpha=0.3)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Rxw8GqbljdiW"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "name": "Colab へようこそ",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}